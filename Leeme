
# Proyecto con arquitectura MVC y patr√≥n DAO

Este proyecto est√° desarrollado en Python, utilizando el paquete
gr√°fico CustomTkinter para la interfaz de usuario y SQLite como
sistema de gesti√≥n de base de datos. La arquitectura del proyecto
sigue el patr√≥n MVC (Modelo-Vista-Controlador), en conjunto con el
patr√≥n DAO (Data Access Object) para la manipulaci√≥n estructurada
de la base de datos.

## üìÅ Estructura del proyecto

El proyecto se encuentra organizado en las siguientes carpetas
principales:

- **Vista/**
  Contiene todas las interfaces gr√°ficas (pantallas o formularios)
  del sistema.

  **Principios clave**:

  - Cada clase visual tiene su propia vista.
  - Se debe evitar incluir l√≥gica de negocio en esta capa.
  - Las vistas utilizan m√©todos peque√±os y simples, preferentemente
    definidos con `command` (sin par√°metros) o `lambda` (con
    par√°metros), seg√∫n se necesite.
  - Toda la l√≥gica se delega al modelo mediante el controlador.

- **Modelos/**
  Encargada de la l√≥gica de negocio y la funcionalidad principal de
  cada clase del sistema.

  **Incluye**:

  - Validaciones.
  - Env√≠o de correos electr√≥nicos.
  - Coordinaci√≥n de funciones relacionadas con la aplicaci√≥n.

  ‚ö† **Importante**: No se realizan consultas ni modificaciones
  directas a la base de datos en esta capa. Si se necesita trabajar
  con SQL, debe hacerse a trav√©s del DAO correspondiente.

- **DAO/**
  Contiene el acceso a la base de datos. Cada clase tiene su propio
  archivo DAO, el cual contiene su respectivo CRUD (Create, Read,
  Update, Delete).

  **Normas para esta carpeta**:

  - Todo el c√≥digo SQL (sentencias "INSERT"`, "SELECT", "UPDATE", `DELETE`, etc.)
    debe implementarse √∫nicamente aqu√≠.
  - Si se necesitan m√©todos adicionales con SQL, deben
    implementarse dentro del archivo DAO correspondiente.

##  Principios de desarrollo

- Se sigue el estilo `snake_case` para el nombrado de variables y
  funciones, seg√∫n las normas de estilo de Python (PEP 8).
- Se busca mantener el principio de responsabilidad √∫nica,
  dividiendo la l√≥gica, la vista y el acceso a datos en capas
  separadas.
- Se prioriza la reutilizaci√≥n y la legibilidad del c√≥digo.
- Cada metodo o funcion tiene una unica responsabilidad especifica lo cual
  facilita pruebas y mantenibilidad.

##  Requisitos

- Python 3.8 o superior.
- `customtkinter`.
- `sqlite3` (incluido en Python est√°ndar).

Este proyecto utiliza SQLite como motor de base de datos  
Los archivos .db y su inicializaci√≥n est√°n controlados desde los m√≥dulos DAO.
La estructura de la base de datos est√° normalizada por clases, 
y cada clase tiene su propio DAO encargado de manejarla.

#Buenas pr√°cticas recomendadas
Evitar l√≥gica en las vistas, limitarla a llamadas al controlador.

Mantener los m√©todos peque√±os y concisos.

Utilizar lambda y command apropiadamente en los botones/interacciones.

No realizar accesos directos a la base de datos fuera de los DAO.

Documentar las funciones y mantener comentarios claros donde sea necesario.

